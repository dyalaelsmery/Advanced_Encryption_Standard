org 100h

.data

inP db 17, ?, 17 dup(?)
inKey db 17, ?, 17 dup(?)

state_array db 16 dup(?) ; 16 bytes for the state array
cipher_key db 16 dup(?)  ; 16 bytes for the cipher key 


prompt_state db 'Enter state array (16 bytes in hex): $'
prompt_key db 'Enter cipher key (16 bytes in hex): $'


sbox db 0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76
     db 0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0
     db 0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15
     db 0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75
     db 0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84
     db 0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf
     db 0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8
     db 0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2
     db 0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73
     db 0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb
     db 0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79
     db 0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08
     db 0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a
     db 0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e
     db 0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf
     db 0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16

counter DB 0
.code

MAIN PROC 
    
    ; Procedure to XOR two 128-bit (16 bytes) arrays
xor_arrays macro
    LOCAL xor_loop
    push si
    push di
    mov di, bx ; Destination array (state_array)
    mov si, dx ; Source array (cipher_key)
    mov cx, 16
xor_loop:
    mov al, [si]
    xor al, [di]
    mov [di], al
    inc si
    inc di
    loop xor_loop
    pop di
    pop si
    
endm


; SubBytes procedure
subBytes macro
    local subBytes_loop
    push si
    push di
    lea di, sbox
    mov cx, 16
subBytes_loop:
    mov al, [si]
    xlat
    mov [si], al
    inc si
    loop subBytes_loop
    pop di
    pop si
endm

; ShiftRows procedure
shiftRows macro
    ; Row 1: no shift
    ; Row 2: shift left by 1
    ; Row 3: shift left by 2
    ; Row 4: shift left by 3
add si, 4  ; Move to the start of the second row
    mov al, [si]   ; Save the first element of the second row
    mov bl, [si+1]
    mov cl, [si+2]
    mov dl, [si+3]
    mov [si], bl
    mov [si+1], cl
    mov [si+2], dl
    mov [si+3], al 
    ; Row 3
    add si, 8        ; Move to the start of the third row
    mov al, [si]     
    mov bl, [si+1]  
    mov cl, [si+2] 
    mov dl, [si+3]  
    mov [si], cl     
    mov [si+1], dl
    mov [si+2], al
    mov [si+3], bl 
    ; Row 4
   add si, 12       ; Move to the start of the fourth row
    mov al, [si+3]   ; Save the last element of the fourth row
    mov bl, [si+2]
    mov cl, [si+1]
    mov dl, [si]
    mov [si+3], bl
    mov [si+2], cl
    mov [si+1], dl
    mov [si], al
    pop si
endm

; MixColumns procedure
mixColumns macro 
    LOCAL mixColumns_loop
    push si
    push di
    mov di, si
    mov cx, 4
mixColumns_loop:
    mixColumn
    add si, 4
    loop mixColumns_loop
    pop di
    pop si
endm

; MixColumn procedure
mixColumn macro
    push bx
    push cx
    push dx
    push ax

    mov al, [si]
    mov ah, [si+1]
    mov bl, [si+2]
    mov bh, [si+3]

    mov cl, al
    mov dl, ah
    mov dh, bl
    mov ch, bh

    xtime
    xtime
    xor al, [si]
    xor al, [si+1]
    xor al, [si+2]
    xor al, [si+3]

    xtime
    xor al, cl
    xor al, dh

    mov [di], al

    pop ax
    pop dx
    pop cx
    pop bx
endm

; xtime procedure
xtime macro
    LOCAl xtime_done
    push bx
    push cx
    push dx

    shl al, 1
    jnc xtime_done
    xor al, 1Bh

xtime_done:
    pop dx
    pop cx
    pop bx
   
endm


    LEA DX, prompt_state
    MOV AH, 09H
    int 21h 
    
    MOV DX, offset inP
    MOV AH, 0Ah
    int 21h
             
    MOV AX, 3
    int 10h
    
    LEA DX, prompt_key
    MOV AH, 09H
    int 21h

    MOV DX, offset inKey
    MOV AH, 0Ah
    int 21h
    
    MOV AX, 3
    int 10h
    
    
    MOV CX, 16
    MOV BX, 2
    Nazzer:
        MOV AH, inP[BX]
        MOV state_array[BX-2], AH
        MOV AH, inKey[BX]
        MOV cipher_Key[BX-2],AH
        INC BX
        LOOP nazzer
        
    XOR AX, AX
    XOR BX, BX
    XOR CX, CX

    ; Initial AddRoundKey
    lea bx, state_array
    lea si, cipher_key
    xor_arrays

    ; 9 Rounds of AES
    mov counter, 0
round_loop:
   
    ; Perform SubBytes operation
    lea si, state_array
    subBytes

    ; Perform ShiftRows operation
    lea si, state_array
    shiftRows

    ; Perform MixColumns operation
    lea si, state_array
    mixColumns

    ; Perform AddRoundKey operation
    lea bx, state_array
    lea si, cipher_key
    xor_arrays
    INC counter
    CMP counter, 9
    JNZ round_loop

    ; 10th Round without MixColumns
     ;Perform SubBytes operation
    lea si, state_array
    subBytes

    ; Perform ShiftRows operation
    lea si, state_array
    shiftRows

    ; Perform AddRoundKey operation
    lea bx, state_array
    lea si, cipher_key
    xor_arrays
    
    MOV SI, offset state_array
    MOV SI, 0
    MOV CX, 0
    
    OUTPUTLOOP:
        MOV AL, [SI]
        MOV DL, AL
        MOV AH, 02h
        int 21h
        INC SI
        
        INC CX
        CMP CX, 16
        JNZ OUTPUTLOOP
    
    MOV AH, 4Ch
    INT 21h

ret
MAIN ENDP